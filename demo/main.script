
function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	math.randomseed(123456)

	self.meshes = {}
	for i = 1, tonumber(sys.get_config("mesh.max_count", 1000)) do
		local mesh = {}

		mesh.pos = vmath.vector3(1280 * (math.random() * 0.9 + 0.05), 720 * (math.random() * 0.9 + 0.05), math.random() * 0.5)
		mesh.id = factory.create("#factory", mesh.pos)
		mesh.url = msg.url("main", mesh.id, "mesh")
		mesh.color1 = vmath.vector4(math.random(), math.random(), math.random(), 1.0)
		mesh.color2 = vmath.vector4(math.random(), math.random(), math.random(), 1.0)
		mesh.animate = math.random()

		go.set(mesh.url, "color1", mesh.color1)
		go.set(mesh.url, "color2", mesh.color2)
		go.set(mesh.url, "animate", vmath.vector4((1 + math.cos(mesh.animate)) / 2, 0, 0, 0))

		table.insert(self.meshes, mesh)
	end

	msg.post("#debug", "mesh_count", { count = #self.meshes })
end

function update(self, dt)
	local anim_hash = hash("animate")
	for i = 1, #self.meshes do
		local mesh = self.meshes[i]

		mesh.animate = mesh.animate + math.pi * dt
		go.set(mesh.url, anim_hash, vmath.vector4((1 + math.cos(mesh.animate)) / 2, 0, 0, 0))
	end
end

function on_input(self, action_id, action)
	if action_id == hash("key_f2") and action.pressed then
		self.profiler_enabled = not self.profiler_enabled
		profiler.enable_ui(self.profiler_enabled)
		profiler.set_ui_vsync_wait_visible(false)
	end
end
